import sensor, image, time, lcd
from maix import KPU
import gc

from fpioa_manager import fm
from machine import UART




# 16x16点阵汉字定义
CHINESE_FONT = {
    "厨": [
        0x00,0x00,0x3F,0xFE,0x20,0x08,0x3F,0x88,0x20,0x08,0x2F,0x08,0x29,0x7E,0x29,0x08,
        0x29,0x08,0x2F,0x48,0x20,0x28,0x29,0x08,0x26,0x08,0x43,0x88,0x5C,0x28,0x88,0x10
    ],
    "余": [
        0x01,0x00,0x01,0x00,0x02,0x80,0x04,0x40,0x08,0x20,0x10,0x10,0x2F,0xE8,0xC1,0x06,
        0x01,0x00,0x3F,0xF8,0x01,0x00,0x11,0x10,0x11,0x08,0x21,0x04,0x45,0x04,0x02,0x00,
    ],
    "垃": [
        0x10,0x80,0x10,0x40,0x10,0x40,0x10,0x00,0x13,0xFC,0xFC,0x00,0x10,0x08,0x11,0x08,
        0x11,0x08,0x10,0x90,0x10,0x90,0x1C,0x90,0xE0,0xA0,0x40,0x20,0x07,0xFE,0x00,0x00
    ],
    "圾": [
        0x10,0x00,0x17,0xF8,0x11,0x08,0x11,0x10,0x11,0x10,0xFD,0x20,0x11,0x3C,0x11,0x04,
        0x11,0x04,0x12,0x88,0x1E,0x88,0xE2,0x50,0x44,0x20,0x04,0x50,0x08,0x88,0x03,0x06
    ],
    "可": [
        0x00,0x00,0x7F,0xFE,0x00,0x10,0x00,0x10,0x1F,0x10,0x11,0x10,0x11,0x10,0x11,0x10,
        0x11,0x10,0x11,0x10,0x1F,0x10,0x11,0x10,0x00,0x10,0x00,0x10,0x00,0x50,0x00,0x20
    ],
    "回": [
        0x00,0x00,0x3F,0xF8,0x20,0x08,0x20,0x08,0x27,0xC8,0x24,0x48,0x24,0x48,0x24,0x48,
        0x24,0x48,0x24,0x48,0x27,0xC8,0x20,0x08,0x20,0x08,0x3F,0xF8,0x20,0x08,0x00,0x00
    ],
    "收": [
        0x08,0x40,0x08,0x40,0x48,0x40,0x48,0x80,0x48,0xFE,0x49,0x08,0x4A,0x88,0x48,0x88,
        0x48,0x88,0x58,0x50,0x68,0x50,0x48,0x20,0x08,0x50,0x08,0x88,0x09,0x04,0x0A,0x02
    ],
    "有": [
        0x02,0x00,0x02,0x00,0xFF,0xFE,0x04,0x00,0x04,0x00,0x0F,0xF0,0x08,0x10,0x18,0x10,
        0x2F,0xF0,0x48,0x10,0x88,0x10,0x0F,0xF0,0x08,0x10,0x08,0x10,0x08,0x50,0x08,0x20
    ],
    "害": [
        0x02,0x00,0x01,0x00,0x7F,0xFE,0x40,0x02,0x81,0x04,0x3F,0xF8,0x01,0x00,0x1F,0xF0,
        0x01,0x00,0xFF,0xFE,0x01,0x00,0x1F,0xF0,0x10,0x10,0x10,0x10,0x1F,0xF0,0x10,0x10
    ],
    "其": [
        0x08,0x20,0x08,0x20,0x7F,0xFC,0x08,0x20,0x08,0x20,0x0F,0xE0,0x08,0x20,0x08,0x20,
        0x0F,0xE0,0x08,0x20,0x08,0x20,0xFF,0xFE,0x00,0x00,0x08,0x20,0x10,0x10,0x20,0x08
    ],
    "它": [
        0x02,0x00,0x01,0x00,0x7F,0xFE,0x40,0x02,0x80,0x04,0x08,0x00,0x08,0x08,0x08,0x30,
        0x09,0xC0,0x0E,0x00,0x08,0x00,0x08,0x04,0x08,0x04,0x08,0x04,0x07,0xFC,0x00,0x00
    ],
    "价": [
        0x08,0x40,0x08,0x40,0x08,0xA0,0x10,0xA0,0x11,0x10,0x32,0x08,0x34,0x06,0x51,0x10,
        0x91,0x10,0x11,0x10,0x11,0x10,0x11,0x10,0x11,0x10,0x12,0x10,0x12,0x10,0x14,0x10
    ],
    "0": [
        0x07,0xC0,0x08,0x20,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
        0x10,0x10,0x10,0x10,0x08,0x20,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ],
    "1": [
        0x01,0x00,0x03,0x00,0x05,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,
        0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ],
    "2": [
        0x07,0x80,0x08,0x40,0x10,0x20,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,
        0x02,0x00,0x04,0x00,0x08,0x00,0x1F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ],
    "3": [
        0x0F,0xF0,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0xC0,0x00,0x20,0x00,0x10,0x00,0x10,
        0x00,0x10,0x00,0x10,0x08,0x20,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ],
    "4": [
        0x02,0x00,0x02,0x00,0x04,0x00,0x04,0x80,0x08,0x80,0x08,0x80,0x10,0x80,0x10,0x80,
        0x3F,0xF0,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ],
    "5": [
        0x1F,0xC0,0x10,0x00,0x10,0x00,0x10,0x00,0x1F,0x00,0x00,0x80,0x00,0x40,0x00,0x40,
        0x00,0x40,0x00,0x40,0x10,0x80,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ],
    "6": [
        0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x0F,0x80,0x10,0x40,0x10,0x20,
        0x10,0x20,0x10,0x20,0x08,0x40,0x07,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ],
    "7": [
        0x1F,0xF0,0x00,0x20,0x00,0x40,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x02,0x00,
        0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ],
    "8": [
        0x07,0x80,0x08,0x40,0x10,0x20,0x10,0x20,0x08,0x40,0x07,0x80,0x08,0x40,0x10,0x20,
        0x10,0x20,0x10,0x20,0x08,0x40,0x07,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ],
    "9": [
        0x07,0x80,0x08,0x40,0x10,0x20,0x10,0x20,0x10,0x20,0x08,0x20,0x07,0xC0,0x00,0x40,
        0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ],
    ".": [
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ]
}


# 价格映射表
PRICE_MAP = {
    0: 1.10,  # 厨余垃圾
    1: 0.00,  # 有害垃圾
    2: 2.10,  # 可回收垃圾
    3: 0.10   # 其它垃圾
}

# 汉字绘制函数
def draw_chinese(img, x, y, char, color, scale=1):
    if char not in CHINESE_FONT:
        return
    data = CHINESE_FONT[char]
    for row in range(16):
        byte1 = data[row * 2]
        byte2 = data[row * 2 + 1]
        for col in range(16):
            if col < 8:
                if byte1 & (0x80 >> col):
                    for i in range(scale):
                        for j in range(scale):
                            img.set_pixel(x + col * scale + i, y + row * scale + j, color)
            else:
                if byte2 & (0x80 >> (col - 8)):
                    for i in range(scale):
                        for j in range(scale):
                            img.set_pixel(x + col * scale + i, y + row * scale + j, color)

# 绘制中文短语
def draw_chinese_phrase(img, x, y, phrase, color, scale=1):
    offset = 0
    for char in phrase:
        draw_chinese(img, x + offset, y, char, color, scale)
        offset += 16 * scale + 2  # 字符宽度+间距

# 绘制价格信息
def draw_price_info(img, x, y, class_id, color, scale=1):
    price = PRICE_MAP[class_id]
    # 格式化价格字符串，保留一位小数
    price_str = "回收价:{:.1f}元/斤".format(price)

    ## 计算金额（示例：假设重量为0.5斤）
    #weight = 0.5
    #amount = price * weight
    #amount_str = "金额: {:.1f}元".format(amount)

    # 绘制价格信息
    draw_chinese_phrase(img, x, y, price_str, color, scale)

    ## 在价格下方绘制金额信息
    #draw_chinese_phrase(img, x, y + 20 * scale, amount_str, color, scale)



lcd.init()                          # 初始化LCD显示屏
sensor.reset()                      # 复位并初始化摄像头
sensor.set_pixformat(sensor.RGB565) # 设置摄像头输出格式为 RGB565
sensor.set_framesize(sensor.QVGA)   # 设置摄像头输出大小为 QVGA (320x240)
sensor.skip_frames(time = 1000)     # 等待摄像头稳定
clock = time.clock()                # 创建一个clock对象，用来计算帧率

#检测模型需要320*256图输入，这里初始化一个image
od_img = image.Image(size=(320,256))

obj_name = ("chuYuLaJi", "youHaiLaJi","keHuiShouLaJi","qiTaLaJi")
obj_name_chinese = ("厨余垃圾", "有害垃圾", "可回收垃圾", "其它垃圾")

anchor = [1.31, 1.69, 1.56, 1.50, 1.41, 3.09, 2.25, 2.00, 2.69, 2.94]
# 创建一个kpu对象
kpu = KPU()
print("ready load model")
# 加载模型
#kpu.load_kmodel(0x300000, 1536936)
kpu.load_kmodel("det006.kmodel")
# yolo2初始化
kpu.init_yolo2(anchor, anchor_num=5, img_w=320, img_h=240, net_w=320 , net_h=256 ,layer_w=10 ,layer_h=8, threshold=0.7, nms_value=0.3, classes=4)




# 引脚配置
fm.register(7, fm.fpioa.UART2_TX, force=True)
fm.register(6, fm.fpioa.UART2_RX, force=True)

# 初始化UART1和UART2
uart_B = UART(UART.UART2, 115200, 8, 0, 0, timeout=1000, read_buf_len=4096)

# 在循环外添加变量
last_send_time = time.ticks_ms()
send_interval = 2000  # 发送间隔(毫秒)

i = 0
while True:
    i += 1
    #print("cnt :", i)
    clock.tick()                        # 更新计算帧率的clock
    img = sensor.snapshot()             # 拍照，获取一张图像
    #a = od_img.draw_image(img, 0,0)     # 将img图像写到od_img图像的坐标（0,0）位置处
    img.pix_to_ai()                  # 对rgb565的image生成ai运算需要的r8g8b8格式存储
    kpu.run_with_output(img)         # 对输入图像进行kpu运算
    dect = kpu.regionlayer_yolo2()      # yolo2后处理
    fps = clock.fps()                   # 获取帧率

    # 画出框并显示物体类别
    if len(dect) > 0:
        print("dect:",dect)
        for l in dect :
            a = img.draw_rectangle(l[0],l[1],l[2],l[3], color=(0, 255, 0))
            #a = img.draw_string(l[0],l[1], obj_name[l[4]], color=(0, 255, 0), scale=1.5)

             # 绘制垃圾类别
            draw_chinese_phrase(img, l[0], l[1] - 20, obj_name_chinese[l[4]], color=(0, 255, 0), scale=1)

            # 在类别下方绘制价格信息（使用黄色）
            draw_price_info(img, l[0], l[1] + 5, l[4], color=(255, 255, 0), scale=1)

            current_time = time.ticks_ms()
            if time.ticks_diff(current_time, last_send_time) >= send_interval:
                # 串口发送（发送垃圾类别）
                str_data = obj_name[l[4]] + "\r\n"
                uart_B.write(str_data)
                last_send_time = current_time  # 更新最后发送时间
                print("senduart:",str_data)




    a = img.draw_string(0, 0, "%2.1ffps" %(fps), color=(0, 60, 128), scale=1.0)
    lcd.display(img)
    gc.collect()




# 创建的kpu对象去初始化，释放模型内存
kpu.deinit()
